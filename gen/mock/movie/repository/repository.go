// Code generated by MockGen. DO NOT EDIT.
// Source: ./movie/internal/controller/movie/movie.go
//
// Generated by this command:
//
//	mockgen -package=repository -source=./movie/internal/controller/movie/movie.go
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	model "movieexample.com/metadata/pkg/model"
	model0 "movieexample.com/rating/pkg/model"
)

// MockratingGateway is a mock of ratingGateway interface.
type MockratingGateway struct {
	ctrl     *gomock.Controller
	recorder *MockratingGatewayMockRecorder
}

// MockratingGatewayMockRecorder is the mock recorder for MockratingGateway.
type MockratingGatewayMockRecorder struct {
	mock *MockratingGateway
}

// NewMockratingGateway creates a new mock instance.
func NewMockratingGateway(ctrl *gomock.Controller) *MockratingGateway {
	mock := &MockratingGateway{ctrl: ctrl}
	mock.recorder = &MockratingGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockratingGateway) EXPECT() *MockratingGatewayMockRecorder {
	return m.recorder
}

// GetAggregatedRating mocks base method.
func (m *MockratingGateway) GetAggregatedRating(ctx context.Context, recordID model0.RecordID, recordType model0.RecordType) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregatedRating", ctx, recordID, recordType)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregatedRating indicates an expected call of GetAggregatedRating.
func (mr *MockratingGatewayMockRecorder) GetAggregatedRating(ctx, recordID, recordType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregatedRating", reflect.TypeOf((*MockratingGateway)(nil).GetAggregatedRating), ctx, recordID, recordType)
}

// PutRating mocks base method.
func (m *MockratingGateway) PutRating(ctx context.Context, recordID model0.RecordID, recordType model0.RecordType, rating *model0.Rating) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRating", ctx, recordID, recordType, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutRating indicates an expected call of PutRating.
func (mr *MockratingGatewayMockRecorder) PutRating(ctx, recordID, recordType, rating any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRating", reflect.TypeOf((*MockratingGateway)(nil).PutRating), ctx, recordID, recordType, rating)
}

// MockmetadataGateway is a mock of metadataGateway interface.
type MockmetadataGateway struct {
	ctrl     *gomock.Controller
	recorder *MockmetadataGatewayMockRecorder
}

// MockmetadataGatewayMockRecorder is the mock recorder for MockmetadataGateway.
type MockmetadataGatewayMockRecorder struct {
	mock *MockmetadataGateway
}

// NewMockmetadataGateway creates a new mock instance.
func NewMockmetadataGateway(ctrl *gomock.Controller) *MockmetadataGateway {
	mock := &MockmetadataGateway{ctrl: ctrl}
	mock.recorder = &MockmetadataGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmetadataGateway) EXPECT() *MockmetadataGatewayMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockmetadataGateway) Get(ctx context.Context, id string) (*model.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockmetadataGatewayMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockmetadataGateway)(nil).Get), ctx, id)
}

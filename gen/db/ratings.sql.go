// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ratings.sql

package dbGen

import (
	"context"
	"database/sql"
)

const getRatings = `-- name: GetRatings :many
SELECT
    user_id,
    value
FROM
    ratings
WHERE
    record_id = ?
    AND record_type = ?
`

type GetRatingsParams struct {
	RecordID   sql.NullString
	RecordType sql.NullString
}

type GetRatingsRow struct {
	UserID sql.NullString
	Value  sql.NullInt32
}

func (q *Queries) GetRatings(ctx context.Context, arg GetRatingsParams) ([]GetRatingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRatings, arg.RecordID, arg.RecordType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRatingsRow
	for rows.Next() {
		var i GetRatingsRow
		if err := rows.Scan(&i.UserID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRating = `-- name: InsertRating :execresult
INSERT INTO
    ratings (record_id, record_type, user_id, value)
VALUES
    (?, ?, ?, ?)
`

type InsertRatingParams struct {
	RecordID   sql.NullString
	RecordType sql.NullString
	UserID     sql.NullString
	Value      sql.NullInt32
}

func (q *Queries) InsertRating(ctx context.Context, arg InsertRatingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertRating,
		arg.RecordID,
		arg.RecordType,
		arg.UserID,
		arg.Value,
	)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ratings.sql

package dbGen

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const getRatings = `-- name: GetRatings :many
SELECT user_id, value
FROM ratings
WHERE record_id = $1
  AND record_type = $2
`

type GetRatingsParams struct {
	RecordID   pgtype.Text
	RecordType pgtype.Text
}

type GetRatingsRow struct {
	UserID pgtype.Text
	Value  pgtype.Int4
}

func (q *Queries) GetRatings(ctx context.Context, arg GetRatingsParams) ([]GetRatingsRow, error) {
	rows, err := q.db.Query(ctx, getRatings, arg.RecordID, arg.RecordType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRatingsRow
	for rows.Next() {
		var i GetRatingsRow
		if err := rows.Scan(&i.UserID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRating = `-- name: InsertRating :execresult
INSERT INTO ratings (record_id, record_type, user_id, value)
VALUES ($1, $2, $3, $4)
`

type InsertRatingParams struct {
	RecordID   pgtype.Text
	RecordType pgtype.Text
	UserID     pgtype.Text
	Value      pgtype.Int4
}

func (q *Queries) InsertRating(ctx context.Context, arg InsertRatingParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertRating,
		arg.RecordID,
		arg.RecordType,
		arg.UserID,
		arg.Value,
	)
}
